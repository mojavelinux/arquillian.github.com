h1. !{vertical-align:middle}https://github.com/arquillian/arquillian.github.com/raw/develop/images/arquillian_icon_64.png! Arquillian Website Source

This repository contains the source of the Arquillian website (hosted using "github pages":http://pages.github.com), to which the "arquillian.org":arquillian.org hostname resolves.

The website is built using "Awestruct":awestruct.org. The develop branch contains the unprocessed website source. From that content, Awestruct generates a static website under the @_site@ directory. The website is published to the public site by pushing the contents of the @_site@ directory to the master branch.

h2. Setting Up Awestruct

You need to have Awestruct installed on your machine to preview the website locally. Awestruct is a available as Ruby gem in the GemCutter repository. You can install it into either a native Ruby or a JRuby installation. The instructions here will cover setting up Awestruct in a native Ruby installation in Linux.

Begin by installing the package for Ruby and RubyGems.

h3. Installing Ruby and RubyGems on Ubuntu

If you have Ubuntu, use this command to install Ruby and RubyGems:

bc. $ sudo apt-get install rubygems

Ubuntu does not currently add the RubyGems bin directory to your path. Put the following files in your shell configuration file (.bashrc) and restart the shell.

bc. $ export GEM_HOME=/var/lib/gems/1.8 \ 
export PATH=$PATH:$GEM_HOME/bin

Now the executables for any gem you install will be available on your path.

h3. Installing Ruby and RubyGems on Fedora

If you have Fedora, use this command to install Ruby:

bc. $ sudo yum install ruby ruby-devel ruby-libs ruby-mode ruby-rdoc ruby-irb ruby-ri ruby-docs ruby-mysql ruby-sqlite3

You then need to install RubyGems manually:

bc.. $ wget -q http://rubyforge.org/frs/download.php/55066/rubygems-1.3.2.tgz \
tar xzf rubygems-1.3.2.tgz \
cd rubygems-1.3.2 \
sudo ruby setup.rb

p. If you get stuck, refer to "this guide":http://www.technetra.com/2009/04/22/howto-setting-up-ruby-on-rails-for-fedora-10-and-11 for more details.

h3. Installing the Awestruct Gem

Now you are ready to install the awestruct gem and it's dependencies. The remainder of the commands work on any Ruby installation:

bc. $ sudo gem install awestruct

You're all set!

p. Make sure you have Awestruct >= 0.2.5. If you already have Awestruct installed, you may need to update it using this command:

bc. $ sudo gem update awestruct

h3. Additional Required Gems

As the website matures, more gems will be required. This section documents the required third-party gems not already installed by Awestruct.

Install these Gems using the @gem install@ command as you did above.

* rest-client
* git
* sassy-buttons
* json (if using jruby)
* jruby-openssl (if using jruby)

h2. Previewing the Site Locally

Now that you have awestruct installed, you can preview the website locally by running it in development mode. Development mode uses a file monitor to automatically update the site when you make a change to the source files.

Run the following command to launch the preview server:

bc. awestruct -d

Visit the following page in your browser:

"http://localhost:4242":http://localhost:4242

You're now awestruct!

If you only want to generate once when you start the server, use this command:

bc. awestruct --server -P development

Add the @--force@ flag to either command to regenerate the site from scratch.

h2. Conventions

"Haml":http://haml-lang.com is the preferred abstract HTML markup language.

* "Haml Reference":http://haml-lang.com/docs/yardoc/file.HAML_REFERENCE.html

 "Textile":http://redcloth.org/textile is the preferred text markup language.

* "Textile Reference":http://redcloth.org/textile

"Sass":http://sass-lang.com and "Compass":http://compass-style.org are the preferred CSS frameworks.

* "Sass Reference":http://sass-lang.com/docs/yardoc/file.SASS_REFERENCE.html
* "Compass Reference":http://compass-style.org/reference/compass

Source files are indented using 2 spaces. Haml files require the same indentation size throughout. Ruby hashes should have no leading or trailing spaces and options such be seperated by a comma followed by a space (e.g., @{:href=>"http://arquillian.org", title=>"Arquillian Project Site"}@).

Note: In a HAML document, if you use the equals seperator (=) rather than a greater than equals (=>) in a hash key-value assignment, Awestruct will crash.

h2. Page structure

* #banner
** h2#logo
** #navigation
* #main
** #content-header
*** h1
** #content
*** .post
**** .header
***** h2.title
***** .byline
**** .body
**** .footer
** #sidebar
* #footer

h2. Writing a Blog Entry

Writing a blog entry is very easy. All you have to do is fill in a brief prolog at the top of the file, then just type your content. The rest is handled for you.

h3. Filename

To write a blog entry, create a new textile document with the file extension .textile in the blog/ folder. The name of the file is important. It determines the date of the blog entry and the URL. The syntax is:

bq. YYYY-MM-DD-URL.textile

You cannot use dots or spaces in the URL segment.

For example:

bq. 2011-10-02-announcing-arquillian-1-0.textile

h3. Prolog

The prolog is a set of name/value pairs defined at the top of the file in between two lines containing three dashes. In this section you define the following metadata:

* layout (always "blog")
* title (use sentence capitalization)
* author
* tags (array structure, limit to 5, use singular forms as in "release")

Here's an example (refer to HTML output):

pre. ---
layout: blog
title: Announcing Arquillian 1.0!
author: Aslak Knutsen
tags: [ announcements, releases ]
--- << only copy the hyphens and the lines of text between them

h3. Content

Below the prolog, you just type in textile format.

h3. Code

To insert syntax highlighted code, followed by paragraph text, use the following syntax (refer to HTML output of this guide):

pre. bc(prettify).. public class Alien {
    public String getName() {
        return "Ike";
    }
}

pre. p. This sentence will appear below the code.

You don't normally need to use the p. prefix to enter a paragrah. However, it's required after a code block to indicate to the parser that the code snippet has ended. If the content following the code is not paragraph text (for instance, a list item), use notextile. instead of p., but include one space at the end of the line.

The language is detected automatically.

If you are running awestruct in preview mode, you need to touch the blog/index.html.haml file to see the blog show up in the index (likely a bug).

h3. Images

Images should be put in the images/blog/ folder. An image should be no more than 600px wide.

h2. Writing a Guide

Writing a guide is much like writing a blog entry (and, as such, just as easy). You need to supply some prolog information, a header stating what the guide covers and content partitioned using level 3 (h3) headings. The rest is handled for you, including the table of contents and listing in the index.

h3. Filename

To write a blog entry, create a new textile document with the file extension .textile in the guides/ folder. The name of the file will become the last path in the guide's URL and thus should closely match the guide's title. Since it's part of the URL, the filename should not contain spaces.

h3. Prolog

The prolog is a set of name/value pairs defined at the top of the file in between two lines containing three dashes. In this section you define the following metadata:

* layout (always "guide")
* title (use title capitalization)
* authors (comma seperated list of original authors of the guide)
* tags (comma seperated list)
* guide_summary (summary text to be used in the guide index)
* guide_group (numeric; 1 = beginner, 2 = intermediate, 3 = advanced)
* guide_order (numeric weight; less is more)

Here's an example (refer to HTML output):

pre. ---
layout: guide
title: Getting Started
authors: [Dan Allen]
tags: [cdi, weld, maven, forge, eclipse]
guide_summary: Learn how to add Arquillian to the test suite of your project and write your first Arquillian test.
guide_group: 1
guide_order: 10
--- << only copy the hyphens and the lines of text between them

h3. Content

Below the prolog, you type in textile format.

You should begin each guide with a summary that lays out what the guide covers. It should be regular paragraph text surrounding a list of topics.

The remainder of the content should be divided into level 3 (h3) headings. The heading title should be no more than 20 characters and use title capitalization.

NOTE: Currently, you cannot use acronyms in the heading of a guide section.

h3. Code

Refer to the instruction for writing a blog entry to learn how to enter code.

h3. Images

Images should be put in the images/guides/ folder.

h2. Textile Extensions

You can add emoticons by immediately preceding any of the following smile symbols with tilde (~):

- :) := smile
- ;) := wink
- :S := confused
- :D := happy

Here's an example ~;)

h2. TODO

* document the features of the arquillian website (for the jboss.org focus group)
* iron out which module pages to enable for launch
* update git repo before generation (perhaps a flag?)
* link checker (wget --spider --force-html -r http://localhost:4242/index.html > report.txt 2>&1)
* avatar on blog entry
* make sure homepage loads fast (consult yslow rules)
* don't need arquillian.xml configuration for JBoss AS 7.0.2
* blog for 1.0 release
* how to use IRC chat page from sfwk.org/Seam3/Chat content
* use site.contributors for info on teams page (missing job title)
* last published date for website (footer or header)
* unify team and contributors name/position stying
* use ['user']['bio'] to pull bios for team and contributors pages
* add links to guide authors (authors should be username rather than name)
* link Invasion Team images to github, jboss community, twitter, etc (bigger pictures?)
** see contributions page
* probably need to redo the screenshots on community page
* l&f of module pages (versions & version matrix, contributor grid) (partially done)
** show GAV stanza on module pages
* link to FAQ? (other than in guides index, footer?)
* links to migration guides? perhaps on core module page? or release blogs?
* download & maven coordinates (perhaps on module pages)
* float module info in release blog to right
* list contributors to guide by reading authors from git reflog (aslak)
* add share buttons in footer (facebook, google+, etc) (see http://dandypixels.com/sharecount/#howto) (Follow Us: t f or Like Us: Like +1)
* html5 icon in footer
* finish porting blogs
* guides
** dependency resolver!!!
** running showcase examples
** use container adapter standalone 
** how to build Arquillian
* add "Release Date" as part of "Latest Release"
* tutorial versions? (best to do it by major arquillian release)
* code section
** latest JIRA issues added/fixed/updated (stream is done, could still use work)
** latest commits
** ohloh "I Use This" badge?
** contribute guide (like http://seamframework.org/Seam3/Contribute)
* Sarah
** header section on home page so that page can be white (linear gradient isn't working on mobile) (sarah)
** font colors in general, colors of callouts in guide
** callouts for code in home page slider

h2. To fix

* jGFeed is destroying the year of the published date 
* make slides responsive to window resize (calculate width of slide when transitioning)
** currently a bit hacked up
* rename guides #section div to something more appropriate (perhaps use #content-header)
* fix total hack in css of upcoming events on home page
* cleanup images, make naming consistent (hyphen vs underscore)
* why does community/contributors use contributors[1]?
* get rid of "bp" class on body
* find way to remove duplicate markup for blog index and entry
* remove inline CSS hacks
* JBoss Community button needs to be better integrated. is it an action?
* can't get filename block to overlap code block
* make interwiki syntax more concise, if possible (currently "ARQ-100":issue://ARQ-100)
* bullets in blockquote not supported by textile, workaround is ugly
* can't use "API" in guide header
* code index page is reflowing when ohloh gadget shows up
* #category-header or #category rather than #content-header?

h2. Nice to have

* use addthis buttons on guides
* author image on blog
* author link should be jboss community or preferred url
* feedburner for RSS feed
* PDF export for guides (w/ download link in upper right hand corner of guide)
* quote bubble when you fly over Ike that says "Don't mock me."
* testimonial block on home page
* consolidate duplicate reference guide in guides menu and index page
* rdoc for extensions (like the lanyrd extension)
* fix hard-coded uses of css reflection (might need to just do reflection in gimp)
* collapse events from same event on home page event feed
* polish guide names
* show tags in guides (guide tag cloud?)
* selenium server image in drone tutorial
* Blog page title should use prefix "Arquillian Blog | "
* latest site updates based on commits to arquillian.github.com front-matter files
* license page like sproutcore
* back to top button on footer
* html5 logo in footer
* Can arquillian tell the launched process to wait for the debugger so you can use the Connect to remote server feature we made recently?
* slides.js w/ pure css slide transitions (http://stackoverflow.com/questions/2087510/callback-on-css-transition)

h2. Considering

* could do div(filename). %src/test/java/MyTest.java%
* tabs for features?
* mention jboss testing guild?
* javadoc shown for class from arquillian api/spi

h2. Phase II

* html 5 tags (need to switch from hpricot to nokigiri)
* clearly identify what information we want in a release
** release blog should have a summary that gets include in latest posts feed
** list of contributors
** maven coordinates/link
* add best practices and tips to awestruct.org
** jsonp, jquery-template, jGFeed
* responsive layout (based on susy)
** support for mobile and tablet screens
* write guides for the website that end up as tools project examples
* Green Bar Challenge: https://github.com/aslakknutsen/arquillian.github.com/tree/green_bar
* migrate from Hpricot to Nokogiri (will allow us to use html5 tags)
* explore other inline textile tags such as link:/guides/getting_started

h2. Awestruct Requests

* use :no_span_caps in RedCloth (or honor config option in pipeline)
* blog index & home page does not refresh after writing new blog entry (need to touch files)
* don't try to generate page ending in ~ (solved by changing vim backupdir)

h2. Extension Ideas

* extension for AddThis (addthis.com)
* materialize cdn javascript to _site/javascripts and rewrite src url
* Nobles extension from config
* interwiki links (like JIRA, Github resource, etc)
* ohloh widget
* Mode to just execute extensions pipeline, then stop (no generation)
* feedburner url for atomizer extension (enables in production)

h2. Extensions to Contribute

* Video tag in textile
* Events from lanyrd (search website & process into site.sessions)
* Guides similar to the Posts extension
** extract the stuff for the guide layouts into a css 'module/blueprint'
* Fork me on github ribbon

h2. Resources

* Preview site: http://arqpreview-alrubinger.rhcloud.com/
* Currently using Google Prettify, could use "jQuery wrapper":http://balupton.github.com/jquery-syntaxhighlighter
* Icons from Faenza Gnome icon theme
* A pure CSS sticky footer technique: http://ryanfait.com/sticky-footer/
* Font typography: http://www.dev-archive.net/articles/typograph1-en.html#Ch23
* Ideas for textile plugins: http://octopress.org/docs/plugins/
* HTML/CSS/JS 'fiddle' tool: http://jsfiddle.net
* Sass resources: http://thesassway.com/
